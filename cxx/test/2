#include	<iostream>
#include	<climits>
#include    <string>
#include    <exception>
#include    <stdexcept>
#include    <algorithm>
#include    <vector>
#include    <iterator>
#include    <cassert>
#include    <unordered_map>

using namespace std;
template<typename T>
struct TreeNode {
    T v;
    TreeNode* l;
    TreeNode* r;
    TreeNode(T& v) : v(v), l(nullptr), r(nullptr) {};
};

typedef TreeNode<int> TNI;

TNI* genTree(vector<int>& d, int p)
{
    TNI* r = nullptr;
    if (p>=d.size() || d[p] == numeric_limits<int>::min()) {
        return nullptr;
    }
    TNI* c = new TNI(d[p]);
    c->l = genTree(d, p+1);
    c->l = genTree(d, p+2);
    return c;
}
void cleanupTree(TNI* r)
{
    if (!r) return ;
    if (r->l || r->r) {
        if (r->l)
            cleanupTree(r->l);
        if (r->r)
            cleanupTree(r->r);
        delete r;
    }
}
string itoa(int v)
{
    string r;
    bool neg = false;
    if (v<0) {
        neg = true;
        v = -v;
    }
    while (v) {
        int t = v%10;
        r += string(1, (char)('0'+t));
        v /= 10;
    }
    if (neg) r+="-";
    if (v > 9)
        reverse(r.begin(), r.end());
    return r;
}
void treeToString_helper(TNI* r, string& s)
{
    if (!r) {
        s+="@|";
        return;
    }
    s+= itoa(r->v);
    treeToString_helper(r->l, s);
    treeToString_helper(r->r, s);
}
string treeToString(TNI* r)
{
    string res = "";
    treeToString_helper(r, res);
    return res;
}
int main()
{
    vector<int> d {1, 3, INT_MIN, -2, INT_MIN, INT_MIN, 5, 4, INT_MIN, 6, 8, INT_MIN, INT_MIN, 10, INT_MIN, INT_MIN, INT_MIN};
    TNI* nr = genTree(d, 0);
    cout << treeToString(nr) << endl;
    return 0;
}
